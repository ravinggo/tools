// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package output

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson61e0ab13DecodeGithubComRavinggoToolsZerologGenOutputTestsOutput(in *jlexer.Lexer, out *User) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ID":
			out.ID = int(in.Int())
		case "Name":
			out.Name = string(in.String())
		case "Age":
			out.Age = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson61e0ab13EncodeGithubComRavinggoToolsZerologGenOutputTestsOutput(out *jwriter.Writer, in User) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ID\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"Name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"Age\":"
		out.RawString(prefix)
		out.Int(int(in.Age))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v User) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson61e0ab13EncodeGithubComRavinggoToolsZerologGenOutputTestsOutput(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v User) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson61e0ab13EncodeGithubComRavinggoToolsZerologGenOutputTestsOutput(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *User) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson61e0ab13DecodeGithubComRavinggoToolsZerologGenOutputTestsOutput(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *User) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson61e0ab13DecodeGithubComRavinggoToolsZerologGenOutputTestsOutput(l, v)
}
func easyjson61e0ab13DecodeGithubComRavinggoToolsZerologGenOutputTestsOutput1(in *jlexer.Lexer, out *Player) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "PID":
			out.PID = int64(in.Int64())
		case "User":
			(out.User).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson61e0ab13EncodeGithubComRavinggoToolsZerologGenOutputTestsOutput1(out *jwriter.Writer, in Player) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"PID\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.PID))
	}
	{
		const prefix string = ",\"User\":"
		out.RawString(prefix)
		(in.User).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Player) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson61e0ab13EncodeGithubComRavinggoToolsZerologGenOutputTestsOutput1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Player) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson61e0ab13EncodeGithubComRavinggoToolsZerologGenOutputTestsOutput1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Player) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson61e0ab13DecodeGithubComRavinggoToolsZerologGenOutputTestsOutput1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Player) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson61e0ab13DecodeGithubComRavinggoToolsZerologGenOutputTestsOutput1(l, v)
}
func easyjson61e0ab13DecodeGithubComRavinggoToolsZerologGenOutputTestsOutput2(in *jlexer.Lexer, out *Item) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ID":
			out.ID = int64(in.Int64())
		case "CID":
			out.CID = int64(in.Int64())
		case "Value":
			out.Value = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson61e0ab13EncodeGithubComRavinggoToolsZerologGenOutputTestsOutput2(out *jwriter.Writer, in Item) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ID\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"CID\":"
		out.RawString(prefix)
		out.Int64(int64(in.CID))
	}
	{
		const prefix string = ",\"Value\":"
		out.RawString(prefix)
		out.Int64(int64(in.Value))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Item) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson61e0ab13EncodeGithubComRavinggoToolsZerologGenOutputTestsOutput2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Item) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson61e0ab13EncodeGithubComRavinggoToolsZerologGenOutputTestsOutput2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Item) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson61e0ab13DecodeGithubComRavinggoToolsZerologGenOutputTestsOutput2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Item) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson61e0ab13DecodeGithubComRavinggoToolsZerologGenOutputTestsOutput2(l, v)
}
func easyjson61e0ab13DecodeGithubComRavinggoToolsZerologGenOutputTestsOutput3(in *jlexer.Lexer, out *History) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "A":
			out.A = int(in.Int())
		case "B":
			out.B = int64(in.Int64())
		case "C":
			out.C = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson61e0ab13EncodeGithubComRavinggoToolsZerologGenOutputTestsOutput3(out *jwriter.Writer, in History) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"A\":"
		out.RawString(prefix[1:])
		out.Int(int(in.A))
	}
	{
		const prefix string = ",\"B\":"
		out.RawString(prefix)
		out.Int64(int64(in.B))
	}
	{
		const prefix string = ",\"C\":"
		out.RawString(prefix)
		out.String(string(in.C))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v History) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson61e0ab13EncodeGithubComRavinggoToolsZerologGenOutputTestsOutput3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v History) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson61e0ab13EncodeGithubComRavinggoToolsZerologGenOutputTestsOutput3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *History) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson61e0ab13DecodeGithubComRavinggoToolsZerologGenOutputTestsOutput3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *History) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson61e0ab13DecodeGithubComRavinggoToolsZerologGenOutputTestsOutput3(l, v)
}
func easyjson61e0ab13DecodeGithubComRavinggoToolsZerologGenOutputTestsOutput4(in *jlexer.Lexer, out *Fight) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "A":
			out.A = int64(in.Int64())
		case "B":
			out.B = int(in.Int())
		case "C":
			if in.IsNull() {
				in.Skip()
				out.C = nil
			} else {
				in.Delim('[')
				if out.C == nil {
					if !in.IsDelim(']') {
						out.C = make([]string, 0, 4)
					} else {
						out.C = []string{}
					}
				} else {
					out.C = (out.C)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.C = append(out.C, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson61e0ab13EncodeGithubComRavinggoToolsZerologGenOutputTestsOutput4(out *jwriter.Writer, in Fight) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"A\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.A))
	}
	{
		const prefix string = ",\"B\":"
		out.RawString(prefix)
		out.Int(int(in.B))
	}
	{
		const prefix string = ",\"C\":"
		out.RawString(prefix)
		if in.C == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.C {
				if v2 > 0 {
					out.RawByte(',')
				}
				out.String(string(v3))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Fight) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson61e0ab13EncodeGithubComRavinggoToolsZerologGenOutputTestsOutput4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Fight) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson61e0ab13EncodeGithubComRavinggoToolsZerologGenOutputTestsOutput4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Fight) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson61e0ab13DecodeGithubComRavinggoToolsZerologGenOutputTestsOutput4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Fight) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson61e0ab13DecodeGithubComRavinggoToolsZerologGenOutputTestsOutput4(l, v)
}
func easyjson61e0ab13DecodeGithubComRavinggoToolsZerologGenOutputTestsOutput5(in *jlexer.Lexer, out *Domain) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "A":
			out.A = int64(in.Int64())
		case "B":
			out.B = int(in.Int())
		case "C":
			if in.IsNull() {
				in.Skip()
				out.C = nil
			} else {
				in.Delim('[')
				if out.C == nil {
					if !in.IsDelim(']') {
						out.C = make([]string, 0, 4)
					} else {
						out.C = []string{}
					}
				} else {
					out.C = (out.C)[:0]
				}
				for !in.IsDelim(']') {
					var v4 string
					v4 = string(in.String())
					out.C = append(out.C, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson61e0ab13EncodeGithubComRavinggoToolsZerologGenOutputTestsOutput5(out *jwriter.Writer, in Domain) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"A\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.A))
	}
	{
		const prefix string = ",\"B\":"
		out.RawString(prefix)
		out.Int(int(in.B))
	}
	{
		const prefix string = ",\"C\":"
		out.RawString(prefix)
		if in.C == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.C {
				if v5 > 0 {
					out.RawByte(',')
				}
				out.String(string(v6))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Domain) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson61e0ab13EncodeGithubComRavinggoToolsZerologGenOutputTestsOutput5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Domain) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson61e0ab13EncodeGithubComRavinggoToolsZerologGenOutputTestsOutput5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Domain) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson61e0ab13DecodeGithubComRavinggoToolsZerologGenOutputTestsOutput5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Domain) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson61e0ab13DecodeGithubComRavinggoToolsZerologGenOutputTestsOutput5(l, v)
}
