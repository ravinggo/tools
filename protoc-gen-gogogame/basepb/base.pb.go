// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/base.proto

package basepb

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	github_com_mailru_easyjson_buffer "github.com/mailru/easyjson/buffer"
	github_com_mailru_easyjson_jwriter "github.com/mailru/easyjson/jwriter"
	github_com_ravinggo_tools_jsonany "github.com/ravinggo/tools/jsonany"
	google_golang_org_protobuf_reflect_protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	io "io"
	math "math"
	math_bits "math/bits"
	unsafe "unsafe"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type IntTrace struct {
	RoleId         int64  `protobuf:"varint,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
	FromServerId   int64  `protobuf:"varint,2,opt,name=from_server_id,json=fromServerId,proto3" json:"from_server_id,omitempty"`
	FromServerType string `protobuf:"bytes,3,opt,name=from_server_type,json=fromServerType,proto3" json:"from_server_type,omitempty"`
	TraceId        string `protobuf:"bytes,4,opt,name=trace_id,json=traceId,proto3" json:"trace_id,omitempty"`
}

func (m *IntTrace) Reset()      { *m = IntTrace{} }
func (*IntTrace) ProtoMessage() {}
func (*IntTrace) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc17cb2a757cc3a9, []int{0}
}
func (m *IntTrace) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IntTrace) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IntTrace.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IntTrace) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IntTrace.Merge(m, src)
}
func (m *IntTrace) XXX_Size() int {
	return m.Size()
}
func (m *IntTrace) XXX_DiscardUnknown() {
	xxx_messageInfo_IntTrace.DiscardUnknown(m)
}

var xxx_messageInfo_IntTrace proto.InternalMessageInfo

func (m *IntTrace) GetRoleId() int64 {
	if m != nil {
		return m.RoleId
	}
	return 0
}

func (m *IntTrace) GetFromServerId() int64 {
	if m != nil {
		return m.FromServerId
	}
	return 0
}

func (m *IntTrace) GetFromServerType() string {
	if m != nil {
		return m.FromServerType
	}
	return ""
}

func (m *IntTrace) GetTraceId() string {
	if m != nil {
		return m.TraceId
	}
	return ""
}

func (*IntTrace) XXX_MessageName() string {
	return "basepb.IntTrace"
}

type StringTrace struct {
	RoleId         string `protobuf:"bytes,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
	FromServerId   int64  `protobuf:"varint,2,opt,name=from_server_id,json=fromServerId,proto3" json:"from_server_id,omitempty"`
	FromServerType string `protobuf:"bytes,3,opt,name=from_server_type,json=fromServerType,proto3" json:"from_server_type,omitempty"`
	TraceId        string `protobuf:"bytes,4,opt,name=trace_id,json=traceId,proto3" json:"trace_id,omitempty"`
}

func (m *StringTrace) Reset()      { *m = StringTrace{} }
func (*StringTrace) ProtoMessage() {}
func (*StringTrace) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc17cb2a757cc3a9, []int{1}
}
func (m *StringTrace) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StringTrace) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StringTrace.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StringTrace) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StringTrace.Merge(m, src)
}
func (m *StringTrace) XXX_Size() int {
	return m.Size()
}
func (m *StringTrace) XXX_DiscardUnknown() {
	xxx_messageInfo_StringTrace.DiscardUnknown(m)
}

var xxx_messageInfo_StringTrace proto.InternalMessageInfo

func (m *StringTrace) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (m *StringTrace) GetFromServerId() int64 {
	if m != nil {
		return m.FromServerId
	}
	return 0
}

func (m *StringTrace) GetFromServerType() string {
	if m != nil {
		return m.FromServerType
	}
	return ""
}

func (m *StringTrace) GetTraceId() string {
	if m != nil {
		return m.TraceId
	}
	return ""
}

func (*StringTrace) XXX_MessageName() string {
	return "basepb.StringTrace"
}
func init() {
	proto.RegisterType((*IntTrace)(nil), "basepb.IntTrace")
	proto.RegisterType((*StringTrace)(nil), "basepb.StringTrace")
}

func init() { proto.RegisterFile("proto/base.proto", fileDescriptor_dc17cb2a757cc3a9) }

var fileDescriptor_dc17cb2a757cc3a9 = []byte{
	// 227 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x28, 0x28, 0xca, 0x2f,
	0xc9, 0xd7, 0x4f, 0x4a, 0x2c, 0x4e, 0xd5, 0x03, 0x33, 0x85, 0xd8, 0x40, 0xec, 0x82, 0x24, 0xa5,
	0x3e, 0x46, 0x2e, 0x0e, 0xcf, 0xbc, 0x92, 0x90, 0xa2, 0xc4, 0xe4, 0x54, 0x21, 0x71, 0x2e, 0xf6,
	0xa2, 0xfc, 0x9c, 0xd4, 0xf8, 0xcc, 0x14, 0x09, 0x46, 0x05, 0x46, 0x0d, 0xe6, 0x20, 0x36, 0x10,
	0xd7, 0x33, 0x45, 0x48, 0x85, 0x8b, 0x2f, 0xad, 0x28, 0x3f, 0x37, 0xbe, 0x38, 0xb5, 0xa8, 0x2c,
	0xb5, 0x08, 0x24, 0xcf, 0x04, 0x96, 0xe7, 0x01, 0x89, 0x06, 0x83, 0x05, 0x3d, 0x53, 0x84, 0x34,
	0xb8, 0x04, 0x90, 0x55, 0x95, 0x54, 0x16, 0xa4, 0x4a, 0x30, 0x2b, 0x30, 0x6a, 0x70, 0x06, 0xf1,
	0x21, 0xd4, 0x85, 0x54, 0x16, 0xa4, 0x0a, 0x49, 0x72, 0x71, 0x94, 0x80, 0x6c, 0x04, 0x99, 0xc4,
	0x02, 0x56, 0xc1, 0x0e, 0xe6, 0x7b, 0xa6, 0x28, 0x4d, 0x64, 0xe4, 0xe2, 0x0e, 0x2e, 0x29, 0xca,
	0xcc, 0x4b, 0xc7, 0xea, 0x26, 0xce, 0x01, 0x70, 0x93, 0x93, 0xd9, 0x8d, 0x87, 0x72, 0x0c, 0x2b,
	0x1e, 0xc9, 0x31, 0x9e, 0x78, 0x24, 0xc7, 0x78, 0xe1, 0x91, 0x1c, 0xe3, 0x83, 0x47, 0x72, 0x8c,
	0x2f, 0x1e, 0xc9, 0x31, 0x7c, 0x78, 0x24, 0xc7, 0x38, 0xe1, 0xb1, 0x1c, 0xc3, 0x89, 0xc7, 0x72,
	0x8c, 0x17, 0x1e, 0xcb, 0x31, 0xdc, 0x78, 0x2c, 0xc7, 0x10, 0xc5, 0xa1, 0xa7, 0x0f, 0x09, 0xdc,
	0x24, 0x36, 0x70, 0x58, 0x1b, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x11, 0xd1, 0xb1, 0x36, 0x7f,
	0x01, 0x00, 0x00,
}

func (this *IntTrace) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*IntTrace)
	if !ok {
		that2, ok := that.(IntTrace)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	if this.FromServerId != that1.FromServerId {
		return false
	}
	if this.FromServerType != that1.FromServerType {
		return false
	}
	if this.TraceId != that1.TraceId {
		return false
	}
	return true
}
func (this *StringTrace) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StringTrace)
	if !ok {
		that2, ok := that.(StringTrace)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	if this.FromServerId != that1.FromServerId {
		return false
	}
	if this.FromServerType != that1.FromServerType {
		return false
	}
	if this.TraceId != that1.TraceId {
		return false
	}
	return true
}
func (m *IntTrace) ProtoReflect() google_golang_org_protobuf_reflect_protoreflect.Message {
	return nil
}
func (m *StringTrace) ProtoReflect() google_golang_org_protobuf_reflect_protoreflect.Message {
	return nil
}
func (m *IntTrace) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IntTrace) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IntTrace) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TraceId) > 0 {
		i -= len(m.TraceId)
		copy(dAtA[i:], m.TraceId)
		i = encodeVarintBase(dAtA, i, uint64(len(m.TraceId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.FromServerType) > 0 {
		i -= len(m.FromServerType)
		copy(dAtA[i:], m.FromServerType)
		i = encodeVarintBase(dAtA, i, uint64(len(m.FromServerType)))
		i--
		dAtA[i] = 0x1a
	}
	if m.FromServerId != 0 {
		i = encodeVarintBase(dAtA, i, uint64(m.FromServerId))
		i--
		dAtA[i] = 0x10
	}
	if m.RoleId != 0 {
		i = encodeVarintBase(dAtA, i, uint64(m.RoleId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StringTrace) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StringTrace) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StringTrace) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TraceId) > 0 {
		i -= len(m.TraceId)
		copy(dAtA[i:], m.TraceId)
		i = encodeVarintBase(dAtA, i, uint64(len(m.TraceId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.FromServerType) > 0 {
		i -= len(m.FromServerType)
		copy(dAtA[i:], m.FromServerType)
		i = encodeVarintBase(dAtA, i, uint64(len(m.FromServerType)))
		i--
		dAtA[i] = 0x1a
	}
	if m.FromServerId != 0 {
		i = encodeVarintBase(dAtA, i, uint64(m.FromServerId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.RoleId) > 0 {
		i -= len(m.RoleId)
		copy(dAtA[i:], m.RoleId)
		i = encodeVarintBase(dAtA, i, uint64(len(m.RoleId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintBase(dAtA []byte, offset int, v uint64) int {
	offset -= sovBase(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

var _ = github_com_ravinggo_tools_jsonany.Any{}

func (m *IntTrace) JsonBytes(w *github_com_mailru_easyjson_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RoleId != 0 {
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.RoleId))
		needWriteComma = true
	}
	if m.FromServerId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("from_server_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.FromServerId))
		needWriteComma = true
	}
	if m.FromServerType != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("from_server_type")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.FromServerType)
		needWriteComma = true
	}
	if m.TraceId != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("trace_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.TraceId)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *StringTrace) JsonBytes(w *github_com_mailru_easyjson_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RoleId != "" {
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId)
		needWriteComma = true
	}
	if m.FromServerId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("from_server_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.FromServerId))
		needWriteComma = true
	}
	if m.FromServerType != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("from_server_type")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.FromServerType)
		needWriteComma = true
	}
	if m.TraceId != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("trace_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.TraceId)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *IntTrace) MarshalJSON() ([]byte, error) {
	w := github_com_mailru_easyjson_jwriter.Writer{Buffer: github_com_mailru_easyjson_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *IntTrace) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *IntTrace) GoString() string {
	return m.String()
}

func (m *StringTrace) MarshalJSON() ([]byte, error) {
	w := github_com_mailru_easyjson_jwriter.Writer{Buffer: github_com_mailru_easyjson_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *StringTrace) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *StringTrace) GoString() string {
	return m.String()
}

func (m *IntTrace) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoleId != 0 {
		n += 1 + sovBase(uint64(m.RoleId))
	}
	if m.FromServerId != 0 {
		n += 1 + sovBase(uint64(m.FromServerId))
	}
	l = len(m.FromServerType)
	if l > 0 {
		n += 1 + l + sovBase(uint64(l))
	}
	l = len(m.TraceId)
	if l > 0 {
		n += 1 + l + sovBase(uint64(l))
	}
	return n
}

func (m *StringTrace) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoleId)
	if l > 0 {
		n += 1 + l + sovBase(uint64(l))
	}
	if m.FromServerId != 0 {
		n += 1 + sovBase(uint64(m.FromServerId))
	}
	l = len(m.FromServerType)
	if l > 0 {
		n += 1 + l + sovBase(uint64(l))
	}
	l = len(m.TraceId)
	if l > 0 {
		n += 1 + l + sovBase(uint64(l))
	}
	return n
}

func sovBase(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBase(x uint64) (n int) {
	return sovBase(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *IntTrace) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IntTrace: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IntTrace: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			m.RoleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoleId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromServerId", wireType)
			}
			m.FromServerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromServerId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromServerType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromServerType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TraceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TraceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StringTrace) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StringTrace: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StringTrace: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromServerId", wireType)
			}
			m.FromServerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromServerId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromServerType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromServerType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TraceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TraceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBase(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBase
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBase
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBase
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBase
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBase
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBase
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBase        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBase          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBase = fmt.Errorf("proto: unexpected end of group")
)
